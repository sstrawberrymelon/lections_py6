# 1) Создайте класс Person и объявите в нем 3 атрибута класса: name (public), phone_number(protected) и сard_number(private), атрибуты класса будут равны следующим значениям: "John", "+996 557 55 17 57" и "9999 9999 9999 9999". Создайте объект 'john' класса Person и выведите на экран все атрибуты класса.

class Person: 
    def __init__(self, name, phone_number, card_number, car) -> None:
        




# 2) Создайте класс Person у которого будут следующие атрибуты экземпляра класса: name (public), phone_number(protected) и сard_number(private). Создайте экземпляр "john" класса Person со значениями ("John", "+996 557 55 17 57" и "9999 9999 9999 9999") и выведите на экран все его атрибуты.






# 3) Снова создайте класс Person и объявите в нем 3 атрибута: name (public), phone_number(protected) и сard_number(private), атрибуты класса будут равны следующим значениям: "John", "+996 557 55 17 57" и "9999 9999 9999 9999".. Создайте объект "john" класса Person и измените все атрибуты класса на значение None после выведите все атрибуты класса.




# 4) Продолжая изменять логику предыдущего задания создайте класс Person у которого будут следующие атрибуты экземпляра класса: name (public), phone_number(protected) и сard_number(private). При инициализации обьекта проверяйте введенные имя. Для этого напишите приватный метод validate_name для валидации имени: данный метод будет проверять длину имени, если длина имени меньше двух то возвращайте имя по дефолту John, если же введенное пользователем имя больше двух, то необходимо возвращать имя с заглавной буквы (JOHN -> John, john -> John и тд). Создайте экземпляр sam класса Person со значениями ("SAM", "+996 557 55 17 57" и "9999 9999 9999 9999") и выведите на экран все его атрибуты






# 5) На этот раз заказчик передумал и попросил вас переписать предыдущий класс, теперь его интересует только валидация номера телефона и номера карты. Создайте класс Person у которого будут следующие атрибуты экземпляра класса: name (public), phone_number(protected) и сard_number(private). При инициализации обьекта проверяйте введенный номер телефона и номер карты. Для этого напишите приватный метод validate_phone_number и защищенный метод validate_cart_number.
# Метод validate_phone_number сначала проверяет на то чтобы номер телефона являлся типом int иначе возвращаем None далее нужно также проверять, чтобы номер начинался на 999 иначе возвращается None
# Метод validate_cart_number в первую очередь также проверяет то что бы номер карты являлся типом int иначе возвращаем None далее нужно также проверять что чтобы количество цифр в номере карт была ровно 16 иначе также возвращаем None. Создайте экземпляр 'tolik' класса Person c правильными данными и выведите на экран все его атрибуты






# 6) Необходимо написать класс Game у которого есть приватный атрибут класса "level" который равен нулю и атрибут экземпляра класса name (ваше имя).
# Класс Game должен иметь методы для увеличения уровня игры (play) и получения текущего уровня (get_level).
# Метод play принимает в себя переменную hours и проверяет если значение этой переменной больше двух то уровень игры увеличивается на единицу иначе ничего не происходит. Так как атрибут класса "level" приватный и поэтому недоступен извне, необходимо реализовать метод "get_level" который возвращает значение атрибута "level".
# Создайте экземпляр "game" класса Game. Выведите на экран значение атрибута "level" затем два раза используйте метод play чтобы уровень игры поднялся на два, после снова выведите на экран значение атрибута "level".