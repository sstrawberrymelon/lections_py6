# 1) Объявите 3 переменных, запишите в них строку, список и словарь. Затем запишите их в список,
# и пройдитесь по нему циклом чтобы распечатать длину сразу каждого из объектов.
# """

# a = 'Hello'
# ls = ['Hello','World']
# dc = {1:1,2:2,3:3}

# list_ = []
# list_.extend([a,ls,dc])

# for i in list_: 
#     print(len(i))
    


# """
# 2) Создайте классы Dog и Cat с одинаковым методом voice. Для собак он должен печатать "Гав",
# для кошек "Мяу".
# Объявите для каждого из классов по экземпляру. Затем объявить функцию to_pet(), 
# которая будет принимать животное и вызывать у него метод voice()
# """

# class Dog: 

#     def voice(self): 
#         print('ГАВ,ГАВ')
    
#     def to_pet(self,voice):
#         voice.voice(self) 


# class Cat: 
#     def voice(self): 
#         print('МЯУ,МЯУ')

#     def to_pet(self,voice):
#         voice.voice(self) 

# a = Cat()
# b = Dog()
# a.voice()
# b.voice()

# """
# 3. Создайте 2 класса: MyInt и MyString, наследуйте MyInt от int, MyString от str. У обоих
# классов переопределите метод, который отвечает за работу с оператором “+”.
# Напишите функцию add_objects(), которая принимает объект одного из 2 типов.
# При сложении объектов класса MyInt должно выдаваться сообщение “Это сложение”, а
# потом идти логика сложения 2 чисел, и выдача результата.
# При конкатенации объектов класса MyString() Должно выдаваться сообщение: “Это
# конкатенация”, а затем логика конкатенации из базового класса и выдача результата.
# """

# class MyInt(int):
#     def __init__(self,num):
#         self.num = num 

#     def __add__(self, num,num2: int) -> int:
#         return 'Это сложение!',num + num2
    
# class MyString(str): 
#     def __init__(self,num):
#         self.num = num 

#     def __add__(self,num,num2):
#         print('Это конкатенация!',num + num2)

#     def add_objects(num):
#         if type(num) == type(int): 
#             num.plus_int(num1,num2)
#         else:
#             num.plus_str







    



# """
# 4) Создайте 3 класса: Person, Employee и Student, при этом Employee и Student должны 
# наследоваться от Person. Определите во всех трёх классах метод get_info():
# -для класса Person он должен принимать и возвращать следующее: “Привет, меня зовут 
# Иван Петров”.
# -для класса Employee он должен принимать и возвращать: “Привет, меня зовут Иван Петров, 
# я работаю в компании “Рога и копыта” на должности “директор”.
# -для класса Student должно приниматься и возвращаться: “Привет, меня зовут Иван Петров,
# я учусь в КГТУ на 3 курсе”.
# Определите функцию get_human_info(), которая будет принимать объект одного из трёх классов, 
# вызывать метод get_info и печатать результат.
# """
# # писать код здесь
# """
# 5) Объявите абстрактный класс геометрических фигур Shape и определите в нём абстрактный 
# метод get_area() для расчёта площади фигуры, которые необходимо переопределить в дочерних
# классах.

# Затем наследуйте от Shape три класса: Triangle, Square и Circle.
# -треугольник создаётся с заданными основанием и высотой
# -квадрат создаётся с заданной длиной стороны
# -круг создаётся с заданным радиусом
# Переопределите в каждом из классов метод get_area() таким образом, чтобы он рассчитывал 
# площадь для конкретной фигуры.

# Затем создайте от каждого из трёх классов по экземпляру, и вызовите у каждого метод get_area()

# Подсказка: для создания абстрактных классов воспользуйтесь модулем abc
# """
# # писать код здесь